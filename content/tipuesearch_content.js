var tipuesearch = {"pages": [{'title': 'About', 'text': '我的學號 40923101 \n 網站倉儲: \xa0 https://github.com/a40923101/cd2022 \n 網頁連結: \xa0 https://a40923101.github.io/cd2022 \n 課程投影片: \xa0 https://a40923101.github.io/cd2022/reveal \n 課程網誌: \xa0 https://a40923101.github.io/cd2022/blog \n', 'tags': '', 'url': 'About.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'W2', 'text': '分組名單 \n \n 第1組: repo: \xa0 40923101 \xa0 www: \xa0 40923101 \xa0 cd2022ag1-repo: \xa0 40923101 \xa0 cd2022ag1-www: \xa0 40923101 repo: \xa0 40923103 \xa0 www: \xa0 40923103 \xa0 cd2022ag1-repo: \xa0 40923103 \xa0 cd2022ag1-www: \xa0 40923103 repo: \xa0 40923108 \xa0 www: \xa0 40923108 \xa0 cd2022ag1-repo: \xa0 40923108 \xa0 cd2022ag1-www: \xa0 40923108 repo: \xa0 40923119 \xa0 www: \xa0 40923119 \xa0 cd2022ag1-repo: \xa0 40923119 \xa0 cd2022ag1-www: \xa0 40923119 repo: \xa0 40923137 \xa0 www: \xa0 40923137 \xa0 cd2022ag1-repo: \xa0 40923137 \xa0 cd2022ag1-www: \xa0 40923137 repo: \xa0 40923154 \xa0 www: \xa0 40923154 \xa0 cd2022ag1-repo: \xa0 40923154 \xa0 cd2022ag1-www: \xa0 40923154 repo: \xa0 40923156 \xa0 www: \xa0 40923156 \xa0 cd2022ag1-repo: \xa0 40923156 \xa0 cd2022ag1-www: \xa0 40923156 repo: \xa0 40971134 \xa0 www: \xa0 40971134 \xa0 cd2022ag1-repo: \xa0 40971134 \xa0 cd2022ag1-www: \xa0 40971134 第2組: repo: \xa0 40923102 \xa0 www: \xa0 40923102 \xa0 cd2022ag2-repo: \xa0 40923102 \xa0 cd2022ag2-www: \xa0 40923102 repo: \xa0 40923104 \xa0 www: \xa0 40923104 \xa0 cd2022ag2-repo: \xa0 40923104 \xa0 cd2022ag2-www: \xa0 40923104 repo: \xa0 40923105 \xa0 www: \xa0 40923105 \xa0 cd2022ag2-repo: \xa0 40923105 \xa0 cd2022ag2-www: \xa0 40923105 repo: \xa0 40923106 \xa0 www: \xa0 40923106 \xa0 cd2022ag2-repo: \xa0 40923106 \xa0 cd2022ag2-www: \xa0 40923106 repo: \xa0 40923107 \xa0 www: \xa0 40923107 \xa0 cd2022ag2-repo: \xa0 40923107 \xa0 cd2022ag2-www: \xa0 40923107 repo: \xa0 40923110 \xa0 www: \xa0 40923110 \xa0 cd2022ag2-repo: \xa0 40923110 \xa0 cd2022ag2-www: \xa0 40923110 repo: \xa0 40923121 \xa0 www: \xa0 40923121 \xa0 cd2022ag2-repo: \xa0 40923121 \xa0 cd2022ag2-www: \xa0 40923121 repo: \xa0 40923153 \xa0 www: \xa0 40923153 \xa0 cd2022ag2-repo: \xa0 40923153 \xa0 cd2022ag2-www: \xa0 40923153 第3組: repo: \xa0 40923129 \xa0 www: \xa0 40923129 \xa0 cd2022ag3-repo: \xa0 40923129 \xa0 cd2022ag3-www: \xa0 40923129 repo: \xa0 40923146 \xa0 www: \xa0 40923146 \xa0 cd2022ag3-repo: \xa0 40923146 \xa0 cd2022ag3-www: \xa0 40923146 repo: \xa0 40923148 \xa0 www: \xa0 40923148 \xa0 cd2022ag3-repo: \xa0 40923148 \xa0 cd2022ag3-www: \xa0 40923148 repo: \xa0 40923109 \xa0 www: \xa0 40923109 \xa0 cd2022ag3-repo: \xa0 40923109 \xa0 cd2022ag3-www: \xa0 40923109 repo: \xa0 40923111 \xa0 www: \xa0 40923111 \xa0 cd2022ag3-repo: \xa0 40923111 \xa0 cd2022ag3-www: \xa0 40923111 repo: \xa0 40923114 \xa0 www: \xa0 40923114 \xa0 cd2022ag3-repo: \xa0 40923114 \xa0 cd2022ag3-www: \xa0 40923114 repo: \xa0 40923115 \xa0 www: \xa0 40923115 \xa0 cd2022ag3-repo: \xa0 40923115 \xa0 cd2022ag3-www: \xa0 40923115 repo: \xa0 40923122 \xa0 www: \xa0 40923122 \xa0 cd2022ag3-repo: \xa0 40923122 \xa0 cd2022ag3-www: \xa0 40923122 第4組: repo: \xa0 40923116 \xa0 www: \xa0 40923116 \xa0 cd2022ag4-repo: \xa0 40923116 \xa0 cd2022ag4-www: \xa0 40923116 repo: \xa0 40923124 \xa0 www: \xa0 40923124 \xa0 cd2022ag4-repo: \xa0 40923124 \xa0 cd2022ag4-www: \xa0 40923124 repo: \xa0 40923125 \xa0 www: \xa0 40923125 \xa0 cd2022ag4-repo: \xa0 40923125 \xa0 cd2022ag4-www: \xa0 40923125 repo: \xa0 40923126 \xa0 www: \xa0 40923126 \xa0 cd2022ag4-repo: \xa0 40923126 \xa0 cd2022ag4-www: \xa0 40923126 repo: \xa0 40923127 \xa0 www: \xa0 40923127 \xa0 cd2022ag4-repo: \xa0 40923127 \xa0 cd2022ag4-www: \xa0 40923127 repo: \xa0 40923128 \xa0 www: \xa0 40923128 \xa0 cd2022ag4-repo: \xa0 40923128 \xa0 cd2022ag4-www: \xa0 40923128 repo: \xa0 40923138 \xa0 www: \xa0 40923138 \xa0 cd2022ag4-repo: \xa0 40923138 \xa0 cd2022ag4-www: \xa0 40923138 repo: \xa0 40923143 \xa0 www: \xa0 40923143 \xa0 cd2022ag4-repo: \xa0 40923143 \xa0 cd2022ag4-www: \xa0 40923143 第5組: repo: \xa0 40923131 \xa0 www: \xa0 40923131 \xa0 cd2022ag5-repo: \xa0 40923131 \xa0 cd2022ag5-www: \xa0 40923131 repo: \xa0 40923133 \xa0 www: \xa0 40923133 \xa0 cd2022ag5-repo: \xa0 40923133 \xa0 cd2022ag5-www: \xa0 40923133 repo: \xa0 40923134 \xa0 www: \xa0 40923134 \xa0 cd2022ag5-repo: \xa0 40923134 \xa0 cd2022ag5-www: \xa0 40923134 repo: \xa0 40923135 \xa0 www: \xa0 40923135 \xa0 cd2022ag5-repo: \xa0 40923135 \xa0 cd2022ag5-www: \xa0 40923135 repo: \xa0 40923139 \xa0 www: \xa0 40923139 \xa0 cd2022ag5-repo: \xa0 40923139 \xa0 cd2022ag5-www: \xa0 40923139 repo: \xa0 40923142 \xa0 www: \xa0 40923142 \xa0 cd2022ag5-repo: \xa0 40923142 \xa0 cd2022ag5-www: \xa0 40923142 repo: \xa0 40923151 \xa0 www: \xa0 40923151 \xa0 cd2022ag5-repo: \xa0 40923151 \xa0 cd2022ag5-www: \xa0 40923151 repo: \xa0 40923123 \xa0 www: \xa0 40923123 \xa0 cd2022ag5-repo: \xa0 40923123 \xa0 cd2022ag5-www: \xa0 40923123 第6組: repo: \xa0 40923113 \xa0 www: \xa0 40923113 \xa0 cd2022ag6-repo: \xa0 40923113 \xa0 cd2022ag6-www: \xa0 40923113 repo: \xa0 40923130 \xa0 www: \xa0 40923130 \xa0 cd2022ag6-repo: \xa0 40923130 \xa0 cd2022ag6-www: \xa0 40923130 repo: \xa0 40923140 \xa0 www: \xa0 40923140 \xa0 cd2022ag6-repo: \xa0 40923140 \xa0 cd2022ag6-www: \xa0 40923140 repo: \xa0 40923144 \xa0 www: \xa0 40923144 \xa0 cd2022ag6-repo: \xa0 40923144 \xa0 cd2022ag6-www: \xa0 40923144 repo: \xa0 40923145 \xa0 www: \xa0 40923145 \xa0 cd2022ag6-repo: \xa0 40923145 \xa0 cd2022ag6-www: \xa0 40923145 repo: \xa0 40923149 \xa0 www: \xa0 40923149 \xa0 cd2022ag6-repo: \xa0 40923149 \xa0 cd2022ag6-www: \xa0 40923149 repo: \xa0 40923150 \xa0 www: \xa0 40923150 \xa0 cd2022ag6-repo: \xa0 40923150 \xa0 cd2022ag6-www: \xa0 40923150 repo: \xa0 40923152 \xa0 www: \xa0 40923152 \xa0 cd2022ag6-repo: \xa0 40923152 \xa0 cd2022ag6-www: \xa0 40923152 第7組: repo: \xa0 40923136 \xa0 www: \xa0 40923136 \xa0 cd2022ag7-repo: \xa0 40923136 \xa0 cd2022ag7-www: \xa0 40923136 repo: \xa0 40923147 \xa0 www: \xa0 40923147 \xa0 cd2022ag7-repo: \xa0 40923147 \xa0 cd2022ag7-www: \xa0 40923147 repo: \xa0 40923157 \xa0 www: \xa0 40923157 \xa0 cd2022ag7-repo: \xa0 40923157 \xa0 cd2022ag7-www: \xa0 40923157 repo: \xa0 40823132 \xa0 www: \xa0 40823132 \xa0 cd2022ag7-repo: \xa0 40823132 \xa0 cd2022ag7-www: \xa0 40823132 repo: \xa0 40823143 \xa0 www: \xa0 40823143 \xa0 cd2022ag7-repo: \xa0 40823143 \xa0 cd2022ag7-www: \xa0 40823143 repo: \xa0 40923117 \xa0 www: \xa0 40923117 \xa0 cd2022ag7-repo: \xa0 40923117 \xa0 cd2022ag7-www: \xa0 40923117 repo: \xa0 40923118 \xa0 www: \xa0 40923118 \xa0 cd2022ag7-repo: \xa0 40923118 \xa0 cd2022ag7-www: \xa0 40923118 repo: \xa0 40923120 \xa0 www: \xa0 40923120 \xa0 cd2022ag7-repo: \xa0 40923120 \xa0 cd2022ag7-www: \xa0 40923120 \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '指定任務:有 38 個比較接近 NX1980 版本功能的教學影片，以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理，完成後將所負責的 Wink 教學影片嵌入個人與大分組的 w3 中。\xa0 \n NX Rendering\xa0 \n NX的渲染功能，可以選擇自己想設計的 顏色 、 線條 、 材質 及 背景 等等。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n NX CAM Introduction \n NX CAM 簡介，講解如何 設置程序 進行工件 模擬加工 。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n NX Sheet Metal Introduction \n NX鈑金介紹，利用 板金工具 在繪圖時會更加便利。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n Adding a texture with Siemens NX \n 使用 Siemens NX 工具 添加自己喜歡的 紋理 或 圖形 。 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n CES: NX Animation Designer \n NX動畫設計器可以設計出機械產品的 運動 路線 。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W6', 'text': '使用blog來記錄自己每週製作的作業 \n \n 編輯好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 將那段網址複製下來 \n \n 在小黑窗打上 \n cd tmp \n cd cd2022\xa0 \n pelican markdown -o blog -s local_publishconf.py \n \n 都好了後可以推看看倉儲，檢查有沒有完成 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '每個組員分配不同的繪圖軟體分別是 Solvespace、NX12、NX1980、NX2008 與 Onshape \n 我是利用 NX12來 繪製出Pick and Place demo範例所需的零組件 \n 將零件組裝好後 \n 利用Coppeliasim模擬機械運轉 \n 目前零件畫好也也組裝完畢 \n 研究程式碼讓機械手臂可以正常運轉 \n 程式碼是參考之前學長姐的例子 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '這週的作業跟期中考一起製作uarm機械 \n 組員分別以Solvespace和NX及Onshape完成零件繪製後 \n 這是我們繪製的uarm各零件圖 \n 總共有64個零件，我繪製了46個零件，剩下的由小組組員完成 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將畫好的零件按照老師給的組合立體圖組合出來 \n 再來存成 STL檔就可以轉入CoppeliaSim \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將uarm組合件存為STL檔後轉入CoppeliaSim \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 以GUI Slider方式控制前三軸作動 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 在繪圖過程中我們兩個人一組 \n 一個負責查詢零件尺寸另一個繪圖 \n 我們分工合作畫了40幾個零件 \n 在畫螺絲時有很多類似的形狀 \n 當時就在想有沒有更快的方法可以繪製相似零件的方法 \n 這方面可以尋找一些資訊看有沒有迅速便利的方法 \n 接著組合圖沒有太大的問題 \n 按照老師給的組合圖細心的組合是沒問題的 \n 比較麻煩的是CoppeliaSim控制前三軸作動 \n 需要仔細將連桿連接 \n 這方面花費較多的時間去研究 \n 最終還是有完成三軸作動 \n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'w10_block_u', 'text': '利用NX來 繪製的正方體零件 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_block_u.html'}, {'title': 'w10_nx_integ', 'text': '開啟可攜式NX \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_nx_integ.html'}, {'title': 'w10_ssh', 'text': '\xa0設置SSh鑰匙 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 點選資料夾date的PuTTy的puttygen.exe \n \n 按下 Generate \n \n 接著把它複製下來 \n \n 然後開啟自己的github的settings按下SSH and GPG keys \n \n 新增 New SSH key \n \n 把剛剛複製的貼上去後，按下Add SSH key \n \n 以上設定好後按下Save private key \n \n 打上檔案名稱 (要在後面打上\xa0 .ppk ) \n \n 接著再開啟date的PuTTy的putty.exe\xa0 \n \n 點選github.com並按下Load \n \n 再去Proxy設定網路位置 \n \n 然後去Auth按Browse選取剛處存的檔案 \n \n 最後按下Save就完成了 \n \n 最後一個步驟去檢查SSH是否成功 \n \n \n', 'tags': '', 'url': 'w10_ssh.html'}, {'title': 'W11', 'text': '第一個任務是將上課筆記推上小組網站 \n 將 w8~w10的 協同作業過程所負責的項目內容與心得 \n 要記得上傳時要先將 圖片和wink改網址 \n 將code複製至小白窗存成文字檔 \n 接著推到小組網頁 \n 在之前就已經有在小組網頁推過資料 \n 所以可以很熟悉推送資料的過程 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 第二個任務是將檔案轉檔 \n 小組組員使用的軟體都不相同 \n 為了可以將零件整合 \n 所以我們將檔案存成 STL檔 \n 這樣就可以匯入其中的繪圖軟體 \n 也可以匯進CoppeliaSam裡面進行模擬操作 \n 先將MTB零件組合檔存成STL導入CoppeliaSam \n 再將零件分解並連接起來 \n 存成 CoppeliaSim\xa0XLM的simple format檔 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': 'uarm 機械手臂所需的零件總共有155個 \n 若不加入重複使用的零件總數有58個 \n uarm零件檔 \n uarm組合檔 \n uarm CoppeliaSim模擬檔 \n \n \n M2X4 螺絲 \n M3X4 内六角 圓頭 螺絲 \n M3X5 内六角 圓頭 螺絲 \n M3X5 平頭 螺絲 \n M3X5 沉頭 螺絲 \n M3X5 扁平 頭鐵鍍鎳 螺絲 \n M3X5  圓頭 黑色十字 螺絲 \n M3X6 内六角圓頭 螺絲 \n M3X15 雙通 螺絲 \n M4X5 顶 螺絲 \n M4X6 沉 頭 螺絲 \n M4X7 平 頭 螺絲 \n M4X10 平 頭 螺絲 \n M4X15 平頭 螺絲 \n MF84 \n 2mm導光柱 \n 2mm導熱硅胶片 \n 3Dprint轉接板 \n 5-13-4軸承 \n 6X2.5 磁鐵 \n 8.3X1.5 防滑墊 \n 前端通用件 \n 前端關節 \n 7mm 支撐柱 \n 3mm 鋁支撐柱 \n 三角形連桿軸承壓緊件 \n 三角形連桿 \n 絞鍊 \n 主臂關節2 \n 主臂關節1 \n 電機軸承支撐座_左側 \n 電機軸承支撐座_右側 \n 右側曲柄 \n 輸出軸 \n 右側連桿 \n 左側連桿 \n 4mm 鋁支撐柱 \n 減速箱上殼 \n 減速箱下殼 \n L型連接件 \n 軸承支撐軸 \n 軸承支撐圈 \n 底座上蓋 \n 底座中間部分 \n 底座蓋 \n 磁编碼器PCB \n 42進步電機 \n 塑料蓋板 \n 利用老師今天所教的可以使用py檔案來run \n 就可以得知uarm機械手臂 \n 30%零件採steel製，其餘採 A l uminum製，總重量 約 2,2205kg \n 全部零件採Aluminum 製，總重量 約1,412kg \n 全部零件採steel製， 總重量 約4,1062kg \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '這個禮拜下載CoppeliaSimEdu \n 他是CoppeliaSim的3.0版 \n \n MTB \n 我是利用 NX12來 繪製出Pick and Place demo範例所需的零組件 \n 將零件組裝好後 \n 利用Coppeliasim模擬機械運轉 \n 目前零件畫好也也組裝完畢 \n 研究程式碼讓機械手臂可以正常運轉 \n 程式碼是參考之前學長姐的例子 \n \n 上課時老師也有講解到可以 啟用批次檔案 \n 有多版次NX近端設定 \n 像是12 1872 1980 2008的版本 \n uarm組合檔 \n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '利用 Coppeliasim 模擬TMB運轉 \n 將方塊吸起來 \n 轉半圈在放下來 \n MTB零件檔 \n MTB組合檔 \n MTB CoppeliaSim模擬檔 \n \n \n 利用老師給的程式碼去修改一些部份 \n 使機械能購運轉 \n 在運轉前要記得零件動態關閉 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n function sysCall_init() \n    axis1=sim.getObject(\'/joint1\')\n    axis2=sim.getObject(\'/joint2\')\n    axis3=sim.getObject(\'/joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    MTB_Robot=sim.getObject("/base")\n    BaseFrame=sim.getObject("/BaseFrame")\n    block =sim.getObject("/block")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180.\nend\n\n\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 0.5*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'user press key:\'..key)\n            if (message==sim.message_keypress) then\n               --if (auxiliaryData[1]==112) then --p activate the suction pad\n                if (auxiliaryData[1]==string.byte(\'p\')) then\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==100) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m\n                     distance3 = distance3 + 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m\n                     distance3 = distance3 - 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_cleanup() \nend \n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n\n\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n\n\n \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '使用老師的程式，利用鍵盤來操作旋轉模擬 \n 就可以順時針及逆時針旋轉 \n 利用 UARM 來Tic-Tae-Toe遊戲模擬 \n joint1， L為順時針，K 為逆時針 \n joint2， J 為順時針， H 為逆時針 \n joint3， G 為順時針， F 為逆時針 \n \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details\n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': '利用tkinter GUI介面slider控制uArm機械手臂 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 利用OpenCV擷取場景中的Vision Sensor串流影像 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'Online Exam', 'text': '\n 1.已知左側綠色底座的uArm機械手臂，其基座座標原點位於絕對座標(1.0, 0.25, 0) ， 啟動模擬後green_suctionpad_frame座標原點則位於 (0.22859,0.26047,0.36576) ， 請列出運算式說明 ， 啟動模擬後 joint1 ， joint2 與 joint3 分別以逆時針旋轉5度後 ， 求green_suctionpad_frame的絕對座標值。 \n joint1， L為順時針，K 為逆時針 \n joint2， J 為順時針， H 為逆時針 \n joint3， G 為順時針， F 為逆時針 \n 運用三角公式推算座標 \n 得出x y z及各個角度 \n 算出來 green_suctionpad_frame的座標為 (0.22859,0.26047,0.36576) \n \n \n joint1， joint2與joint3分別以逆時針旋轉5度後的green_suctionpad_frame絕對座標值 \n (0.2695,0.1963,0.3815) \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為(0.2, 0.4, 0.1) ， 請列出運算式說明左側 uarm 機械手臂的 joint1 ， joint2與joint3該如何旋轉才能讓end effector的吸盤末端中心點移動至紅色方塊頂端中心? \n joint1，I 為順時針，U 為逆時針 \n joint2，Y 為順時針，T 為逆時針 \n joint3，R 為順時針，E 為逆時針 \n joint1先按下I順時針10度，joint2再來 Y順時針27度調整，joint3為 R順時針34度就可以接近紅色方塊的中心 \n \n \n \n', 'tags': '', 'url': 'Online Exam.html'}, {'title': 'W17', 'text': '利用 UARM 來執行Tic-Tae-Toe遊戲模擬 \n 利用15周的作業來修改 \n 利用鍵盤來操作旋轉模擬 \n 我修改了老師的程式 \n 將操作按鍵改為我較熟悉的方式 \n joint1， L為順時針，K 為逆時針 \n joint2，S 為順時針，F 為逆時針 \n joint3，E 為順時針，D 為逆時針 \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W17.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': '建立倉儲', 'text': '先進去老師倉儲的cmsimde site \xa0 \n \n 接著複製網址 \n \n 到Create a new repository點開import a repository \n \n 貼上剛剛複製的網址，名稱設為cd2022 \n \n 接著到小黑窗 \n cd tmp \n git clone --recurse-submodules https://github.com/a40923101/cd2022.git \n cd cd2022 \n cms \n 複製網址\xa0 https://127.0.0.1:9443/ \xa0就可以開啟倉儲 \n \n \n', 'tags': '', 'url': '建立倉儲.html'}, {'title': 'Tokens', 'text': '到 developer setting \xa0中 創建 沒有期限 的 token，以 下選擇都需要打勾 \n \n 複製指令 \n \n 開啟config到白窗，複製貼上指令然後儲存 \n \n 接著到小黑窗acp，檢查完成 \n \n', 'tags': '', 'url': 'Tokens.html'}, {'title': 'wink', 'text': '先到老師的 wink影片開啟原始碼 \n \n 複製原始碼 <script> var winkVideoData = {  dataVersion: 1,  frameRate: 20,  buttonFrameLength: 10,  buttonFrameOffset: 5,  frameStops: {  }, }; // ]]></script> \n \n 將複製下來的原始碼貼在 Source code \n \n 接著開啟錄好的wink影片開啟原始碼 \n \n 在複製一次原始碼 \n \n 將複製下來的原始碼貼在Source code \n 並且修改 \n <video width="960" height="540" \xa0(影片的尺寸) \n data-dirname=" /static " data-varname="winkVideoData" video=""> \n <source src=" /downloads/ wink 4.mp4" \n \n 要將影片放進downloads裡面 \n \n 就可以看到wink影片 \n \n', 'tags': '', 'url': 'wink.html'}, {'title': '小組上傳', 'text': '首先上傳時要先將 圖片和wink改網址 \n 先去個人靜態網頁開啟要修改的照片，將照片網址複製下來 \n \n 接著到動態編輯將網址貼上 \n \n 在來修改wink影片，也是到 靜態網頁開啟wink的網址並且複製下來 \n \n 然後接著到動態編輯將原本的網址覆蓋貼上 \n \n 然後就到小黑窗去acp \n \n 推完後到code複製下來 \n \n 貼到白窗，記得標題要設置<h1>40923101</h1> (組別自己設定學號)，存  .txt 檔 \n \n 到組長創建的cd2022ag1，按下 Fork \n \n 點進去 downloads ，在點選 Upload files \n \n 將 .txt 檔  丟進去 \n \n 然後按下commit changes \n \n 接著到pull requests新增New\xa0 pull request \n \n 按下Create pull request \n \n 再按一次Create pull request \n \n 組長會開協同，可以自己同意Confirm merge \n \n 檢查是否上傳成功 \n \n', 'tags': '', 'url': '小組上傳.html'}, {'title': '反向Pull requests', 'text': '將原本的要 Pull\xa0 request的 帳號調換 ，就可以把對方的資料反向Pull\xa0 request到我的倉儲 \n \n 按下create pull\xa0 request \n \n 再次按下create pull\xa0 request \n \n 最後Merge \xa0pull\xa0 request，檢查有無成功 \n \n \n', 'tags': '', 'url': '反向Pull requests.html'}, {'title': 'Leo', 'text': '在小黑窗開啟 \n leo \n \n 接著開啟 cd2022 的 config 裡面的 pelican \n \n 修改裡面原有的資料，改成自己的學號和標題 \n \n 這裡網址改成自己倉儲 \n \n 下面網址也都改成自己倉儲 \n \n 修改自己想要的標題資訊 \n \n 修改好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 將那段網址複製下來 \n \n 在小黑窗打上 \n cd tmp  \n cd cd2022\xa0 \n pelican markdown -o blog -s local_publishconf.py \n 第一次打會出現一個錯誤，需要再cd2022的markdown裡面加個 images的資料夾 就可以解決錯誤 \n \n 都好了後可以推看看倉儲，檢查有沒有完成 \n \n \n \n', 'tags': '', 'url': 'Leo.html'}, {'title': 'Problem', 'text': '', 'tags': '', 'url': 'Problem.html'}, {'title': 'failed to push', 'text': '在acp時遇到這種錯誤時， git pull \xa0一次之後，在 acp一次就可以解決了 \n \n \n', 'tags': '', 'url': 'failed to push.html'}, {'title': 'midterm', 'text': '這是我們繪製的uarm各零件圖 \n 總共有64個零件，我繪製了46個零件，剩下的由小組組員完成 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將畫好的零件按照老師給的組合立體圖組合出來 \n 再來存成 STL檔就可以轉入CoppeliaSim \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 將uarm組合件存為STL檔後轉入CoppeliaSim \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 以GUI Slider方式控制前三軸作動 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 在繪圖過程中我們兩個人一組 \n 一個負責查詢零件尺寸另一個繪圖 \n 我們分工合作畫了40幾個零件 \n 在畫螺絲時有很多類似的形狀 \n 當時就在想有沒有更快的方法可以繪製相似零件的方法 \n 這方面可以尋找一些資訊看有沒有迅速便利的方法 \n 接著組合圖沒有太大的問題 \n 按照老師給的組合圖細心的組合是沒問題的 \n 比較麻煩的是CoppeliaSim控制前三軸作動 \n 需要仔細將連桿連接 \n 這方面花費較多的時間去研究 \n 最終還是有完成三軸作動 \n \n', 'tags': '', 'url': 'midterm.html'}, {'title': '期末考週', 'text': '利用 uArm機械手臂零件 \n 使用nx12來進行 \n 修改絞鍊和front joint零件的外型 \n 將Triangular connecting rod與left link及end link等零組件 \n 和right crank與right link的組件左右互換 \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 將uarm組合圖轉入CoppeliaSim \n 讓三軸做動 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': '期末考週.html'}]};